{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class RoleGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route) {\n    const requiredRoles = route.data['roles'];\n    if (!this.authService.isAuthenticated()) {\n      this.router.navigate(['/login']);\n      return false;\n    }\n    if (requiredRoles && requiredRoles.length > 0) {\n      const hasRequiredRole = requiredRoles.some(role => this.authService.hasRole(role));\n      if (!hasRequiredRole) {\n        this.router.navigate(['/dashboard']);\n        return false;\n      }\n    }\n    return true;\n  }\n  static {\n    this.ɵfac = function RoleGuard_Factory(t) {\n      return new (t || RoleGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RoleGuard,\n      factory: RoleGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["RoleGuard","constructor","authService","router","canActivate","route","requiredRoles","data","isAuthenticated","navigate","length","hasRequiredRole","some","role","hasRole","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\sawoe\\Desktop\\Assignment\\frontend\\src\\app\\guards\\role.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router, ActivatedRouteSnapshot } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RoleGuard implements CanActivate {\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot): boolean {\r\n    const requiredRoles = route.data['roles'] as string[];\r\n    \r\n    if (!this.authService.isAuthenticated()) {\r\n      this.router.navigate(['/login']);\r\n      return false;\r\n    }\r\n\r\n    if (requiredRoles && requiredRoles.length > 0) {\r\n      const hasRequiredRole = requiredRoles.some(role => \r\n        this.authService.hasRole(role)\r\n      );\r\n      \r\n      if (!hasRequiredRole) {\r\n        this.router.navigate(['/dashboard']);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n} "],"mappings":";;;AAOA,OAAM,MAAOA,SAAS;EACpBC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,WAAWA,CAACC,KAA6B;IACvC,MAAMC,aAAa,GAAGD,KAAK,CAACE,IAAI,CAAC,OAAO,CAAa;IAErD,IAAI,CAAC,IAAI,CAACL,WAAW,CAACM,eAAe,EAAE,EAAE;MACvC,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;IAGd,IAAIH,aAAa,IAAIA,aAAa,CAACI,MAAM,GAAG,CAAC,EAAE;MAC7C,MAAMC,eAAe,GAAGL,aAAa,CAACM,IAAI,CAACC,IAAI,IAC7C,IAAI,CAACX,WAAW,CAACY,OAAO,CAACD,IAAI,CAAC,CAC/B;MAED,IAAI,CAACF,eAAe,EAAE;QACpB,IAAI,CAACR,MAAM,CAACM,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;QACpC,OAAO,KAAK;;;IAIhB,OAAO,IAAI;EACb;;;uBA1BWT,SAAS,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATpB,SAAS;MAAAqB,OAAA,EAATrB,SAAS,CAAAsB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}