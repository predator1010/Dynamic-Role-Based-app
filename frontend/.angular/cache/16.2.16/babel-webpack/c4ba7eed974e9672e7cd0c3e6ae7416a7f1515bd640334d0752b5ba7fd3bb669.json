{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/api';\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.loadUserFromStorage();\n  }\n  // Load user from localStorage on app initialization\n  loadUserFromStorage() {\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('user');\n    if (token && user) {\n      this.currentUserSubject.next(JSON.parse(user));\n    }\n  }\n  // Register new user\n  register(registerData) {\n    return this.http.post(`${this.apiUrl}/auth/register`, registerData).pipe(tap(response => this.handleAuthResponse(response)));\n  }\n  // Login user\n  login(loginData) {\n    return this.http.post(`${this.apiUrl}/auth/login`, loginData).pipe(tap(response => this.handleAuthResponse(response)));\n  }\n  // Get user profile\n  getProfile() {\n    return this.http.get(`${this.apiUrl}/auth/profile`);\n  }\n  // Initialize demo users\n  initializeDemoUsers() {\n    return this.http.post(`${this.apiUrl}/auth/init-demo`, {});\n  }\n  // Handle authentication response\n  handleAuthResponse(response) {\n    localStorage.setItem('token', response.token);\n    localStorage.setItem('user', JSON.stringify({\n      _id: response._id,\n      fullName: response.fullName,\n      email: response.email,\n      role: response.role\n    }));\n    this.currentUserSubject.next({\n      _id: response._id,\n      fullName: response.fullName,\n      email: response.email,\n      role: response.role,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    });\n  }\n  // Logout user\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    this.currentUserSubject.next(null);\n  }\n  // Get current user\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  // Check if user is authenticated\n  isAuthenticated() {\n    return !!this.getCurrentUser();\n  }\n  // Check if user has specific role\n  hasRole(role) {\n    const user = this.getCurrentUser();\n    return user?.role.name === role;\n  }\n  // Check if user has specific permission\n  hasPermission(permission) {\n    const user = this.getCurrentUser();\n    return user?.role.permissions.includes(permission) || false;\n  }\n  // Get auth token\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","http","apiUrl","currentUserSubject","currentUser$","asObservable","loadUserFromStorage","token","localStorage","getItem","user","next","JSON","parse","register","registerData","post","pipe","response","handleAuthResponse","login","loginData","getProfile","get","initializeDemoUsers","setItem","stringify","_id","fullName","email","role","isActive","createdAt","Date","updatedAt","logout","removeItem","getCurrentUser","value","isAuthenticated","hasRole","name","hasPermission","permission","permissions","includes","getToken","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\sawoe\\Desktop\\Assignment\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\r\nimport { AuthResponse, LoginRequest, RegisterRequest, User } from '../models/user.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'http://localhost:3000/api';\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.loadUserFromStorage();\r\n  }\r\n\r\n  // Load user from localStorage on app initialization\r\n  private loadUserFromStorage(): void {\r\n    const token = localStorage.getItem('token');\r\n    const user = localStorage.getItem('user');\r\n    \r\n    if (token && user) {\r\n      this.currentUserSubject.next(JSON.parse(user));\r\n    }\r\n  }\r\n\r\n  // Register new user\r\n  register(registerData: RegisterRequest): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/auth/register`, registerData)\r\n      .pipe(\r\n        tap(response => this.handleAuthResponse(response))\r\n      );\r\n  }\r\n\r\n  // Login user\r\n  login(loginData: LoginRequest): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/auth/login`, loginData)\r\n      .pipe(\r\n        tap(response => this.handleAuthResponse(response))\r\n      );\r\n  }\r\n\r\n  // Get user profile\r\n  getProfile(): Observable<User> {\r\n    return this.http.get<User>(`${this.apiUrl}/auth/profile`);\r\n  }\r\n\r\n  // Initialize demo users\r\n  initializeDemoUsers(): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/auth/init-demo`, {});\r\n  }\r\n\r\n  // Handle authentication response\r\n  private handleAuthResponse(response: AuthResponse): void {\r\n    localStorage.setItem('token', response.token);\r\n    localStorage.setItem('user', JSON.stringify({\r\n      _id: response._id,\r\n      fullName: response.fullName,\r\n      email: response.email,\r\n      role: response.role\r\n    }));\r\n    this.currentUserSubject.next({\r\n      _id: response._id,\r\n      fullName: response.fullName,\r\n      email: response.email,\r\n      role: response.role,\r\n      isActive: true,\r\n      createdAt: new Date(),\r\n      updatedAt: new Date()\r\n    });\r\n  }\r\n\r\n  // Logout user\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    this.currentUserSubject.next(null);\r\n  }\r\n\r\n  // Get current user\r\n  getCurrentUser(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  // Check if user is authenticated\r\n  isAuthenticated(): boolean {\r\n    return !!this.getCurrentUser();\r\n  }\r\n\r\n  // Check if user has specific role\r\n  hasRole(role: string): boolean {\r\n    const user = this.getCurrentUser();\r\n    return user?.role.name === role;\r\n  }\r\n\r\n  // Check if user has specific permission\r\n  hasPermission(permission: string): boolean {\r\n    const user = this.getCurrentUser();\r\n    return user?.role.permissions.includes(permission) || false;\r\n  }\r\n\r\n  // Get auth token\r\n  getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}